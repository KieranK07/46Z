/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       VEX                                                       */
/*    Created:      Thu Sep 26 2019                                           */
/*    Description:  Competition Template                                      */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// ---- END VEXCODE CONFIGURED DEVICES ----

#include "robot-config.h"

using namespace vex;

// A global instance of competition
competition Competition;

// define your global instances of motors and other devices here

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the V5 has been powered on and        */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton(void) {
}

void Forward(int speed, float rotation)  // Go fwd at "speed" for "rotation" 
// wheel rotations
{BackRight.resetRotation();
BackLeft.resetRotation();
FrontRight.resetRotation();
FrontLeft.resetRotation();


BackRight.startSpinTo(-rotation, rotationUnits::rev,speed, velocityUnits::pct);
BackLeft.startSpinTo(rotation, rotationUnits::rev, speed, velocityUnits::pct);
FrontRight.startSpinTo(-rotation, rotationUnits::rev, speed, velocityUnits::pct);
FrontLeft.startSpinTo(rotation, rotationUnits::rev, speed, velocityUnits::pct);

wait(10, msec);



}  // end Forward


void Bward(int speed, float rotation)  // Go rev at "speed" for "rotation" 
// wheel rotations
{BackRight.resetRotation();
BackLeft.resetRotation();
FrontRight.resetRotation();
FrontLeft.resetRotation();


BackRight.startSpinTo(rotation, rotationUnits::rev, speed, velocityUnits::pct);
BackLeft.startSpinTo(rotation, rotationUnits::rev, speed, velocityUnits::pct);
FrontRight.startSpinTo(rotation, rotationUnits::rev, speed, velocityUnits::pct);
FrontLeft.startSpinTo(rotation, rotationUnits::rev, speed, velocityUnits::pct);

wait(10, msec);

}  // end Bward


void RightTurnNow(int speed, float rotation)  // turn right at "speed" for "rotation" 
// wheel rotations
{BackRight.resetRotation();
BackLeft.resetRotation();
FrontRight.resetRotation();
FrontLeft.resetRotation();

BackRight.startSpinTo(rotation, rotationUnits::rev, speed, velocityUnits::pct);
BackLeft.startSpinTo(-rotation, rotationUnits::rev, speed, velocityUnits::pct);
FrontRight.startSpinTo(rotation, rotationUnits::rev, speed, velocityUnits::pct);
FrontLeft.startSpinTo(-rotation, rotationUnits::rev, speed, velocityUnits::pct);

wait(10, msec);

}  // end right 


void LeftTurnNow(int speed, float rotation)  // turn left at "speed" for "rotation" 
// wheel rotations
{BackRight.resetRotation();
BackLeft.resetRotation();
FrontRight.resetRotation();
FrontLeft.resetRotation();

BackRight.startSpinTo(-rotation, rotationUnits::rev, speed, velocityUnits::pct);
BackLeft.startSpinTo(-rotation, rotationUnits::rev, speed, velocityUnits::pct);
FrontRight.startSpinTo(-rotation, rotationUnits::rev, speed, velocityUnits::pct);
FrontLeft.startSpinTo(-rotation, rotationUnits::rev, speed, velocityUnits::pct);;

wait(10, msec);

}  // end left 

void Flywheel(int speed, float rotation)
 
{
//   Fly1.startSpinTo(rotation, rotationUnits::rev,speed, voltageUnits::volt);
// Fly2.startSpinTo(rotation, rotationUnits::rev, speed, voltageUnits::volt);

wait(10, msec);

} //end flywheel

void Intake(int speed, float rotation)
 
{In1.startSpinTo(rotation, rotationUnits::rev, speed, velocityUnits::pct);
In2.startSpinTo(rotation, rotationUnits::rev, speed, velocityUnits::pct);

wait(10, msec);

} //end intake

void roller(int speed, float rotation)
 
{
 In2.resetRotation();
In2.startSpinTo(rotation, rotationUnits::rev, speed, velocityUnits::pct);

wait(10, msec);

} //end roller

void Indexer(int speed, float rotation)
 
{Mike.open();
wait(50, msec);
Mike.close();
} //end flywheel

void Expander(int speed, float rotation)
 
{Expand.open();}

 

 // end Spinn
  

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

 void autonomous(){
Fly1.spin(fwd, 11.04, volt);
Fly2.spin(fwd, 11.04, volt);   
Bward(10,-.1);
wait(900, msec);
roller(100,-0.2);
wait(900, msec);
RightTurnNow(50,0.064);
 wait(3200, msec);
 Mike.open();
 wait(500, msec);
 Mike.close();
 wait(2000, msec);
 Mike.open();
 wait(300, msec);
 Mike.close();
 wait(100000, msec);





 In1.spin(fwd, -100, pct);
 wait(500, msec);
 RightTurnNow(50,.3);
 wait(1000, msec);
 Bward(20, 1);
wait(800, msec);
Bward(40, 1.2);
Fly1.spin(fwd, 10., volt);
Fly2.spin(fwd, 10., volt);   
wait(1000, msec);
RightTurnNow(50,-.45);
wait(2500, msec);
Mike.open();
wait(300, msec);
Mike.close();
wait(300, msec);
RightTurnNow(50,-.9);
wait(2000, msec);
Bward(20, -.45);
wait(1000, msec);
roller(100,-0.6);
wait(2000, msec);
Bward(20, .03);
wait(500, msec);
RightTurnNow(50,-1.2);
wait(1000, msec);
Bward(20, 1);
wait(2000, msec);
RightTurnNow(50,1.55);
wait(2000, msec);
Bward(20, -1);
wait(2000, msec);
Expand. open();
 //RightTurnNow(50, 1.3);
//  Flywheel(100, 5);
 //LeftTurnNow(50, 1.3);
//  Flywheel(100, 5);

  
}



   //..........................................................................
 

  // ..........................................................................
 //  end autonomous



 


/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/
void usercontrol(void) {
  int FlyTog=0;
  int Intake=0;
  int gumboo=((100 - John.Axis2.value()) * John.Axis1.value() / 100);
  int duubyie=John.Axis2.value();
  int rotate=John.Axis4.value();
  int Extimer=0;
  

  // User control code here, inside the loop
  while (1) {

  
    int xLeft = John.Axis4.value();
    int xRight = -John.Axis1.value();
    int yLeft = John.Axis3.value();
    int yRight = -John.Axis2.value();
    if (xLeft&&xRight>5){yRight=0;yLeft=0;}
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo
    // values based on feedback from the joysticks.

if (Extimer>=1000&&John.ButtonB.pressing()){Expand.open();}

    if(xLeft>=20||xLeft<=-20){
    BackLeft.spin(fwd, yLeft - xLeft -xRight, pct);
    FrontLeft.spin(fwd, yLeft + xLeft - xRight, pct);
    BackRight.spin(fwd, yLeft + xLeft + xRight, pct);
    FrontRight.spin(fwd, yLeft - xLeft + xRight, pct);
    }

    else if(xLeft<20||xLeft>-20){
    BackLeft.spin(fwd, yLeft -xRight, pct);
    FrontLeft.spin(fwd, yLeft - xRight, pct);
    BackRight.spin(fwd, yLeft + xRight, pct);
    FrontRight.spin(fwd, yLeft + xRight, pct);
    }

  if (John.ButtonRight.pressing())
  {FlyTog=0;}
  else if (John.ButtonLeft.pressing())
  {FlyTog=1;}

  else if (John.ButtonDown.pressing())
  {FlyTog=2;}

   else if (John.ButtonUp.pressing())
  {FlyTog=3;}

if (FlyTog==1)
 {Fly1.spin(directionType::fwd, 10.3, voltageUnits::volt);
   Fly2.spin(directionType::fwd, 10.3, voltageUnits::volt);}

if (FlyTog==2)
  {Fly1.spin(directionType::fwd, 12, voltageUnits::volt);
   Fly2.spin(directionType::fwd, 12, voltageUnits::volt);}
 
if (FlyTog==3)
  {Fly1.spin(directionType::fwd, 8.8, voltageUnits::volt);
   Fly2.spin(directionType::fwd, 8.8, voltageUnits::volt);}
 


if (FlyTog==0)
  {Fly1.stop(brakeType::coast);
   Fly2.stop(brakeType::coast);}

 if (John.ButtonR2.pressing())
   {Intake=1;}

   if (John.ButtonL2.pressing())
   {Intake=3;}

   if (John.ButtonL1.pressing())
   {Intake=4;}

if (John.ButtonX.pressing())
   {Intake=0;}

if (John.ButtonB.pressing())
   {Intake=2;}

 if (Intake==0)
  {In1.stop(brakeType::hold);
   In2.stop(brakeType::hold);}

 if (Intake==1)
   {In1.spin(directionType::rev, 100, velocityUnits::pct);}

 if (Intake==2)
   {In1.stop(brakeType::coast);}
     wait(10, msec);

if (Intake==3)
   {In2.spin(directionType::rev, 100, velocityUnits::pct);}

if (Intake==4)
   {In2.spin(directionType::fwd, 100, velocityUnits::pct);}

     if (John.ButtonR1.pressing())
   {Mike.open();}
   else
   {Mike.close();}
    
    // Sleep the task for a short amount of time to
                    // prevent wasted resources.bec

task::sleep(10);
Extimer++;
  } // end while
 } // end usercontrol

//
// Main will set up the competition functions and callbacks.
//
int main() {
  // Set up callbacks for autonomous and driver control periods.
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);
  

  // Prevent main from exiting with an infinite loop.
  while (true) {
    wait(100, msec);
  }  // end while
}    // end main

